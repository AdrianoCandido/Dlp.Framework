using Dlp.Authenticator.DataContracts;
using Dlp.Authenticator.DataContracts.InternalContracts;
using Dlp.Framework;
using System;
using System.IO;

namespace Dlp.Authenticator {

    /// <summary>
    /// Class containing authentication and validation methods for the GlobalIdentity service.
    /// </summary>
    public class GlobalIdentity : AbstractAuthenticator {

        /// <summary>
        /// Instantiate the GlobalIdentity authentication service class.
        /// </summary>
        public GlobalIdentity() : base() { }

        /// <summary>
        /// Authenticates a user within the authentication service.
        /// </summary>
        /// <param name="request">Object containing the credentials of the user to be authenticated.</param>
        /// <returns>Returns an AuthenticateUserRequest object containing the result of the authentication.</returns>
        public AuthenticateUserResponse AuthenticateUser(AuthenticateUserRequest request) {

            AuthenticateUserResponse response = new AuthenticateUserResponse();

            try {
                // Obtém o endpoint a ser utilizado para autenticação.
                string endPoint = Path.Combine(this.ConfigurationUtility.GlobalIdentityHostAddress, "api/Authorization/Authenticate");

                // Tenta autenticar um usuário.
                response = RestClient.SendHttpWebRequest<AuthenticateUserResponse>(request, HttpVerb.Post, HttpContentType.Json, endPoint, null).ResponseData;
            }
            catch (Exception ex) {

                // Caso alguma exceção tenha ocorrido, cria um objeto de report para conter as informações do erro.
                Report report = new Report();

                report.Field = "Error";
                report.Message = ex.ToString();

                response.OperationReport.Add(report);
            }

            return response;
        }

        /// <summary>
        /// Validates an authentication token previously generated by the AuthenticateUser method.
        /// </summary>
        /// <param name="request">Object containing the authentication token to be validated.</param>
        /// <returns>Returns a ValidateTokenResponse object containig the validation result.</returns>
        public ValidateTokenResponse ValidateToken(ValidateTokenRequest request) {

            ValidateTokenResponse response = new ValidateTokenResponse();

            try {
                // Obtém o endpoint a ser utilizado para validação.
                string endPoint = Path.Combine(this.ConfigurationUtility.GlobalIdentityHostAddress, "api/Authorization/ValidateToken");

                // Tenta validar um token.
                response = RestClient.SendHttpWebRequest<ValidateTokenResponse>(request, HttpVerb.Post, HttpContentType.Json, endPoint, null).ResponseData;
            }
            catch (Exception ex) {

                // Caso alguma exceção tenha ocorrido, cria um objeto de report para conter as informações do erro.
                Report report = new Report();

                report.Field = "Error";
                report.Message = ex.ToString();

                response.OperationReport.Add(report);
            }

            return response;
        }

        /// <summary>
        /// Checks is a user is associated to one or more of the specified roles.
        /// </summary>
        /// <param name="request">Object containing the data about the user and the roles to be validated.</param>
        /// <returns>Returns an IsUserInRole object containing the result of the role verification.</returns>
        public IsUserInRoleResponse IsUserInRole(IsUserInRoleRequest request) {

            IsUserInRoleResponse response = new IsUserInRoleResponse();

            try {
                // Obtém o endpoint a ser utilizado para validação.
                string endPoint = Path.Combine(this.ConfigurationUtility.GlobalIdentityHostAddress, "api/Authorization/IsUserInRole");

                // Verifica se o usuário pertence a alguma das roles especificadas.
                response = RestClient.SendHttpWebRequest<IsUserInRoleResponse>(request, HttpVerb.Post, HttpContentType.Json, endPoint, null).ResponseData;
            }
            catch (Exception ex) {

                // Caso alguma exceção tenha ocorrido, cria um objeto de report para conter as informações do erro.
                Report report = new Report();

                report.Field = "Error";
                report.Message = ex.ToString();

                response.OperationReport.Add(report);
            }

            return response;
        }

        /// <summary>
        /// Validates a client application, checking if it has access to the application.
        /// </summary>
        /// <param name="request">Object containing the client application data to be validated.</param>
        /// <returns>Returns a ValidateApplicationResponse object containing the validation result.</returns>
        public ValidateApplicationResponse ValidateApplication(ValidateApplicationRequest request) {

            ValidateApplicationResponse response = new ValidateApplicationResponse();

            try {
                // Obtém o endpoint a ser utilizado para validação.
                string endPoint = Path.Combine(this.ConfigurationUtility.GlobalIdentityHostAddress, "api/Authorization/ValidateApplication");

                // Verifica se o usuário pertence a alguma das roles especificadas.
                response = RestClient.SendHttpWebRequest<ValidateApplicationResponse>(request, HttpVerb.Post, HttpContentType.Json, endPoint, null).ResponseData;
            }
            catch (Exception ex) {

                // Caso alguma exceção tenha ocorrido, cria um objeto de report para conter as informações do erro.
                Report report = new Report();

                report.Field = "Error";
                report.Message = ex.ToString();

                response.OperationReport.Add(report);
            }

            return response;
        }
    }
}
